<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd"
	default-lazy-init="true">
<!-- 安全管理服务 -->

	<!-- Shiro的Web过滤器 :shiroFilter：此处使用ShiroFilterFactoryBean来创建ShiroFilter过滤器；
	filters属性用于定义自己的过滤器，即ini配置中的[filters]部分；
	filterChainDefinitions用于声明url和filter的关系，即ini配置中的[urls]部分
	
	 securityManager: Shiro的核心安全接口  *
	 loginUrl: 为登录页面地址,默认会查找根目录下 /login.jsp;
	 successUrl: 为登录成功页面地址（如果首先访问受保护 URL 登录成功，则跳转到实际访问页面）;
	 unauthorizedUrl: 认证未通过访问的页面（“未经授权页面”）
	 
	  filters 属性，authenticationFilter 配置为基于表单认证的过滤器
	  
	 filterChainDefinitions 属性：Shiro链接约束配置，过滤链的定义
	 第一个/ ,是相对于HttpServletRequest.getContextPath()值得到的
	   anon 表示匿名访问（不需要认证与授权）;
	   authc 表示需要认证，perms[SECURITY_ACCOUNT_VIEW] 表示用户需要提供值为“SECURITY_ACCOUNT_VIEW”Permission 信息.
	       由此可见，连接地址配置为 authc 或 perms[XXX] 表示为受保护资源(AuthenticationFilter)。
	   也可以配置成如下形式
	       /security/account/view.do=authc,perms[SECURITY_ACCOUNT_VIEW] 
	  
	1)Shiro验证URL时,URL匹配成功便不再继续匹配查找(所以要注意配置文件中的URL顺序,尤其在使用通配符时) 
	                故filterChainDefinitions的配置顺序为自上而下,以最上面的为准 
	2)当运行一个Web应用程序时,Shiro将会创建一些有用的默认Filter实例,并自动地在[main]项中将它们置为可用
	  	自动地可用的默认的Filter实例是被DefaultFilter枚举类定义的,枚举的名称字段就是可供配置的名称 
	  	anon  				org.apache.shiro.web.filter.authc.AnonymousFilter
	  	authc				org.apache.shiro.web.filter.authc.FormAuthenticationFilter 
   		authcBasic			org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter 
   		logout				org.apache.shiro.web.filter.authc.LogoutFilter 
  		noSessionCreation	org.apache.shiro.web.filter.session.NoSessionCreationFilter 
   		perms				org.apache.shiro.web.filter.authz.PermissionAuthorizationFilter 
  		port				org.apache.shiro.web.filter.authz.PortFilter 
   		rest				org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter 
    	roles				org.apache.shiro.web.filter.authz.RolesAuthorizationFilter 
   		ssl					org.apache.shiro.web.filter.authz.SslFilter 
  		user				org.apache.shiro.web.filter.authz.UserFilter
	3)通常可将这些过滤器分为两组 	
  		anon,authc,authcBasic,user是第一组认证过滤器 
  		perms,port,rest,roles,ssl是第二组授权过滤器
  	 注意user和authc不同：当应用开启了rememberMe时,用户下次访问时可以是一个user,但绝不会是authc,因为authc是需要重新认证的 
                     user表示用户不一定已通过认证,只要曾被Shiro记住过登录状态的用户就可以正常发起请求,比如rememberMe 
                                                               说白了,以前的一个用户登录时开启了rememberMe,然后他关闭浏览器,下次再访问时他就是一个user,而不会authc 	
                                                               
	4)举几个例子
   		/admin=authc,roles[admin]      表示用户必需已通过认证,并拥有admin角色才可以正常发起'/admin'请求 
   	 	/edit=authc,perms[admin:edit]  表示用户必需已通过认证,并拥有admin:edit权限才可以正常发起'/edit'请求 
   	  	/home=user                     表示用户不一定需要已经通过认证,只需要曾经被Shiro记住过登录状态就可以正常发起'/home'请求                   
	5)各默认过滤器常用如下(注意URL Pattern里用到的是两颗星,这样才能实现任意层次的全匹配)	  	
		/admins/**=anon             无参,表示可匿名使用,可以理解为匿名用户或游客 
		/admins/user/**=authc       无参,表示需认证才能使用 
		/admins/user/**=authcBasic  无参,表示httpBasic认证 
		/admins/user/**=user        无参,表示必须存在用户,当登入操作时不做检查 
		/admins/user/**=ssl         无参,表示安全的URL请求,协议为https 
		/admins/user/**=perms[user:add:*] 
			参数可写多个,多参时必须加上引号,且参数之间用逗号分割,如/admins/user/**=perms["user:add:*,user:modify:*"] 
			 当有多个参数时必须每个参数都通过才算通过,相当于isPermitedAll()方法 
		/admins/user/**=port[8081] 
			当请求的URL端口不是8081时,跳转到schemal://serverName:8081?queryString 
			其中schmal是协议http或https等,serverName是你访问的Host,8081是Port端口,queryString是你访问的URL里的?后面的参数 
		/admins/user/**=rest[user] 
		 	根据请求的方法,相当于/admins/user/**=perms[user:method],其中method为post,get,delete等 
		/admins/user/**=roles[admin] 
			参数可写多个,多个时必须加上引号,且参数之间用逗号分割,如/admins/user/**=roles["admin,guest"] 
			当有多个参数时必须每个参数都通过才算通过,相当于hasAllRoles()方法 
   	  	                                          
	--> 
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/admin/login.jsp" />
		<property name="successUrl" value="/admin/common/main.jhtml" />
		<property name="unauthorizedUrl" value="/admin/common/unauthorized.jhtml" />
		<property name="filterChainDefinitions">
			<value>
				/admin/ = anon
				/admin/index.jsp = anon
				/admin/login.jsp = authc
				/admin/logout.jsp = logout
				/admin/common/captcha.jhtml = anon
				
				/shiro/ = anon
				/shiro/list* = authc
				/shiro/add* = perms["admin:shiro:add"]
				/shiro/delete* = perms["admin:shiro:delete"]
				/shiro/update* = perms["admin:shiro:update"]
				
				/admin/product/** = perms["admin:product"]
				/admin/product_category/** = perms["admin:productCategory"]
				/admin/parameter_group/** = perms["admin:parameterGroup"]
				/admin/attribute/** = perms["admin:attribute"]
				/admin/specification/** = perms["admin:specification"]
				/admin/brand/** = perms["admin:brand"]
				/admin/product_notify/** = perms["admin:productNotify"]

				/admin/order/** = perms["admin:order"]
				/admin/print/** = perms["admin:print"]
				/admin/payment/** = perms["admin:payment"]
				/admin/refunds/** = perms["admin:refunds"]
				/admin/shipping/** = perms["admin:shipping"]
				/admin/returns/** = perms["admin:returns"]
				/admin/delivery_center/** = perms["admin:deliveryCenter"]
				/admin/delivery_template/** = perms["admin:deliveryTemplate"]

				/admin/member/** = perms["admin:member"]
				/admin/member_rank/** = perms["admin:memberRank"]
				/admin/member_attribute/** = perms["admin:memberAttribute"]
				/admin/review/** = perms["admin:review"]
				/admin/consultation/** = perms["admin:consultation"]

				/admin/navigation/** = perms["admin:navigation"]
				/admin/article/** = perms["admin:article"]
				/admin/article_category/** = perms["admin:articleCategory"]
				/admin/tag/** = perms["admin:tag"]
				/admin/friend_link/** = perms["admin:friendLink"]
				/admin/ad_position/** = perms["admin:adPosition"]
				/admin/ad/** = perms["admin:ad"]
				/admin/template/** = perms["admin:template"]
				/admin/cache/** = perms["admin:cache"]
				/admin/static/** = perms["admin:static"]
				/admin/index/** = perms["admin:index"]

				<!--/admin/promotion/** = perms["admin:promotion"]-->
				/admin/coupon/** = perms["admin:coupon"]
				/admin/seo/** = perms["admin:seo"]
				/admin/sitemap/** = perms["admin:sitemap"]

				/admin/statistics/** = perms["admin:statistics"]
				/admin/sales/** = perms["admin:sales"]
				/admin/sales_ranking/** = perms["admin:salesRanking"]
				/admin/purchase_ranking/** = perms["admin:purchaseRanking"]
				/admin/deposit/** = perms["admin:deposit"]

				/admin/setting/** = perms["admin:setting"]
				/admin/area/** = perms["admin:area"]
				/admin/payment_method/** = perms["admin:paymentMethod"]
				/admin/shipping_method/** = perms["admin:shippingMethod"]
				/admin/delivery_corp/** = perms["admin:deliveryCorp"]
				/admin/payment_plugin/** = perms["admin:paymentPlugin"]
				/admin/storage_plugin/** = perms["admin:storagePlugin"]
				/admin/admin/** = perms["admin:admin"]
				/admin/role/** = perms["admin:role"]
				/admin/message/** = perms["admin:message"]
				/admin/log/** = perms["admin:log"]
				
				/admin/product_check/** = perms["admin:productCheck"]
				/admin/fenxiao_product/** = perms["admin:productFenxiao"]
				/admin/instruction/** = perms["admin:productInstruction"]
				/admin/member_points/** = perms["admin:memberPoints"]
				/admin/sign_in_point_rule/** = perms["admin:memberSignRewards"]
				/admin/leaveWords/list.jhtml = perms["admin:leaveWords"]
				/admin/leaveWords/listjion.jhtml = perms["admin:joinLeaveWords"]
				/admin/after_booking/list.jhtml = perms["admin:afterBooking"]
				/admin/after_booking/list2.jhtml = perms["admin:afterBookingInstall"]
				/admin/outlet/** = perms["admin:serviceSite"]
				/admin/extension/** = perms["admin:serviceExtended"]
				/admin/warmtips/** = perms["admin:warmTips"]
				
				/admin/trial/* = perms["admin:trialSetting"]
				/admin/trial/apply/* = perms["admin:trialApply"]
				/admin/trial/report/* = perms["admin:trialReport"]
				/admin/group/** = perms["admin:groupon"]
				/admin/store/** = perms["admin:store"]
				/admin/notice/** = perms["admin:notice"]
				/admin/product_zhipai/** = perms["admin:productZhipai"]

				/admin/** = authc
			</value>
		</property>
		<property name="filters">
			<map>
				<entry key="authc" value-ref="authenticationFilter" />
			</map>
		</property>
	</bean>
	
	<!-- 安全管理器:使用用于web环境的DefaultWebSecurityManager。 
	 realm 属性，配置为我们自己实现的 Realm
	 -->  
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="authenticationRealm" />
		<property name="cacheManager" ref="shiroCacheManager" />
	</bean>
	
	<!-- Realm实现 -->  
	<bean id="authenticationRealm" class="net.shopxx.AuthenticationRealm">
		<property name="authorizationCacheName" value="authorization" />
	</bean>
	<!-- 缓存管理器 使用Ehcache实现.
	shiroCacheManager 是 Shiro 对缓存框架 EhCache 的配置
	 -->  
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="ehCacheManager" />
	</bean>

	<bean id="authenticationFilter" class="net.shopxx.filter.AuthenticationFilter" />
	
	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->  
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>

</beans>